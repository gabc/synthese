*** Travail entre classe
*** Loadage de Lib
La lib va implementer une fonction publique.
'construct_<nom_lib>' Qui permettera de retourner un pointeur sur cet objet.
Cet objet sera assigné un id, qui permettera de l'identifier.
Cet id sera fait a partir d'une variable globale, incrémentée.
Cette variable, publique, sera statique.
Publique, pour grandement simplifier le traitement de cette donnée.
Et statique, pour simplifier les créations.

*** Fonctions obligatoires
Chaque objet devra implementer un certain nombre de méthodes.
Ces méthodes sont assumées dans le controlleur. D'ou leurs importances.

Ces méthodes sont:
	int aggressivite(void)
		Cette méthode permet d'avoir une idée du niveau
		d'agressivité de la Créature.
		Par exemple, si elle a faim, elle sera plus agressive.
		Si elle est fatiguée, elle le sera moins, etc.
		Retourne un nombre entre 0 (completement passif) et
		100 (attaque tout ce qu'elle voit).
	
	const QChart * statistiques(void)
		Cette méthode retourne un graphique montrant l'avancement
		de l'adn de la Creature.

	bool canSee(const Creature *c)
		Retourne vrai si this peut voir l'Animal.

	bool canReproduce(void)
		Retourne vrai si this est dans un état ou la reproduction est possible.
		Par exemple: Une femme humaine qui a pas eu d'enfants depuis 10 mois ou plus.

	bool canReproduceWith(const Creature *c)
		Retourne vrai si this est capable d'avoir une progéniture avec l'Animal.
		Par exemple, s'ils sont de la meme especes, de sexe différent,
		si peutSeReproduire est vrai, etc.

	Creature * reproduceWith(const Creature *c)
		Crée un nouvel enfant avec selon les regles de cet animal.
	
	void update(void)
		Méthode qui sera appellée a chaque `tick'.
		(Voir le diagramme d'activitée pour une idée)

	bool isAlive(void)
		Retourne true si la Creature est en vie.

	QRect position(void) // Changer le nom
		Retourne un QRect représentant l'espace pris par la Créature.

	QDnaInterface changeStats(void)
		Retourne une interface pour changer les variables.

	int health(void)
		Retourne le nombre de points de vie de la Créature.
		
	int hitPower(void)
		Retourne la force de frappe de la Créature
		Calcule en fonction de la force de celle-ci.

	int defence(void)
		Retourne la capacité défensive de la Créature

	int getId(void)
		Retourne l'id de la Créature

	void attack(Creature *c)
		Enclanche l'attaque entre this et *c.

	bool isCarnivore(void)
		Retourne true si la Créature est carnivore.
		False, si elle est herbivore.

	bool isAnimal(void)
		Retourne true si la Créature est un Animal.
		False, si c'est un Végétal.
