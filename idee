* Avoir un framework pour les bebites.
	Fonctionnant par DLL/.so
	Avec une interface définie.
	QDir/QFile

* Data structure
	Tenir une liste de tout les trucs sur la carte.
	Passer au travers et caller une fonction (a définir)
	pour qu'elle aie sont tour.
	L'avoir publique, pour que le truc puisse voir autour.
	(Probablement O(n²), ce qui est moche)

	Eg:
	doStuff():
		seen = canSee(listOfAllStuff);
		for t in seen:
			if t can killme:
				gtfo
		...




* Les comportements
** Vue
	Premierement, il est important d'avoir un champ
	de vision pour chaque bebite.
** Faim
	Chaque n tick, la faim descend.
	Et l'envie de manger monte.
** Sommeil
	Voir faim.
** Déterminer le threat d'un autre.
	En gros, comme chaque bebite est de son cote.
	Y'a pas moyen d'avoir un lien direct.
	Il va falloir faire avec un heuristique.

	Par exemple, avoir une comparaison, avec la taille.
	La grosseur.
	La vitesse.
	etc.
	Si ça entre dans une certaine mesure, le truc est safe.

** Combat
** Reproduction
	
* Chaine alimentaire
	Un truc dynamique.
	Chaque bebite, va apprendre s'il peut manger un autre.
	Ou pas.
	Avoir un graphique, montrant les liens.	


* scratch

Probleme a résoudre:
	Comment gerer un nombre arbitraire d'objets différents.
	Comment etre capable d'avoir des intéractions entre eux.
	QMetaObject est pas ce que je veux.
	Juste un pointeur sur un objet.
	Creation d'un premier stuff.
	Retirer un stuff.

	Avoir une fonctio nqui te génere un nouvel objets de ce type.
	Avec les meta-objets, appeller les bonnes methodes.

	Genre:
	for(i = 0; i < ALLTHING.size(); i++){
		ALLTHING[i].doThing();
		/* Ou bien */
		QMetaObject::invokeMethod(ALLTHING[i], "doThing");
		
	Un truc du genre devrait marcher.
	Parce que la lib est loadé en mémoire au complet.
	Donc, j'imagine que l'objet a acces a ses méthodes.
	J'imagine.

	void accouple(QMetaObject *a, QMetaObject *b){
		if(!a->canReproduce() && !a->inDickRangeOf(b) && !b->canReproduceWith(a))
			return NULL;
		QMetaObject *stuff;

		stuff = a->reproduitWith(b);

		ajouteNouveauTruc(stuff);
	}
